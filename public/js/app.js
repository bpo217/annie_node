// Generated by CoffeeScript 1.8.0
(function() {
  var navManager, nmSetup, photographyImageManager, pimSetup, simSetup, stylistImageManager;

  pimSetup = function() {
    return photographyImageManager.setup();
  };

  $(document).ready(pimSetup);

  $(document).on('page:load', pimSetup);

  photographyImageManager = {
    leftStack: [],
    visible: '',
    rightStack: [],
    currentMedia: 'm',
    setup: function() {
      var $photo;
      photographyImageManager.setupMedia();
      photographyImageManager.setupImages(2, 4);
      photographyImageManager.setDOMPhoto();

      /*
      $next = $('#next-cp')
      $previous = $('#previous-cp')
      $next.on 'click', (e)->
        photographyImageManager.nextPhoto()
      $previous.on 'click', (e) ->
        photographyImageManager.previousPhoto()
       */
      $photo = $('#photo-cp');
      return $photo.on('click', function(e) {
        return photographyImageManager.nextPhoto();
      });
    },
    setupMedia: function() {
      var lMediaEvent, mMediaEvent, sMediaEvent;
      lMediaEvent = matchMedia("screen and (min-width: 64em), screen and (min-height: 40em)");
      mMediaEvent = matchMedia("screen and (min-width: 30em), screen and (min-height: 20em)");
      sMediaEvent = matchMedia("not (screen and (min-width: 64em), screen and (min-height: 40em) and (screen and (min-width: 30em), screen and (min-height: 20em)))");
      lMediaEvent.addListener(photographyImageManager.refreshImages);
      mMediaEvent.addListener(photographyImageManager.refreshImages);
      sMediaEvent.addListener(photographyImageManager.refreshImages);
      return photographyImageManager.refreshMedia();
    },
    refreshMedia: function() {
      if (window.matchMedia("screen and (min-width: 64em), screen and (min-height: 40em) ").matches) {
        return photographyImageManager.currentMedia = 'l';
      } else if (window.matchMedia("screen and (min-width: 30em), screen and (min-height: 20em)").matches) {
        return photographyImageManager.currentMedia = 'm';
      } else {
        return photographyImageManager.currentMedia = 's';
      }
    },
    setDOMPhoto: function() {
      return $('#photo-cp').attr('src', photographyImageManager.visible);
    },
    imagePrefix: '/img/cp/',
    imageExtension: '.jpg',
    swapStacks: function() {
      var ls;
      ls = photographyImageManager.leftStack.reverse();
      photographyImageManager.leftStack = photographyImageManager.rightStack.reverse();
      return photographyImageManager.rightStack = ls;
    },
    nextPhoto: function() {
      if (photographyImageManager.rightStack.length === 0) {
        photographyImageManager.swapStacks();
      }
      photographyImageManager.leftStack.push(photographyImageManager.visible);
      photographyImageManager.visible = photographyImageManager.rightStack.pop();
      return photographyImageManager.setDOMPhoto();
    },
    previousPhoto: function() {
      if (photographyImageManager.leftStack.length === 0) {
        photographyImageManager.swapStacks();
      }
      photographyImageManager.rightStack.push(photographyImageManager.visible);
      photographyImageManager.visible = photographyImageManager.leftStack.pop();
      return photographyImageManager.setDOMPhoto();
    },
    setupImages: function(first, end) {
      var ext, i, prefix, size, _i, _results;
      size = photographyImageManager.currentMedia;
      prefix = photographyImageManager.imagePrefix;
      ext = photographyImageManager.imageExtension;
      photographyImageManager.visible = prefix + size + ("/cp_" + 1) + ext;
      _results = [];
      for (i = _i = first; _i <= end; i = _i += 1) {
        _results.push(photographyImageManager.rightStack.push(prefix + size + '/cp_' + i + ext));
      }
      return _results;
    },
    updateImage: function(image) {
      return image.substr(0, 8) + photographyImageManager.currentMedia + image.substr(9);
    },
    refreshImages: function() {
      photographyImageManager.refreshMedia();
      photographyImageManager.visible = photographyImageManager.updateImage(photographyImageManager.visible);
      photographyImageManager.setDOMPhoto();
      photographyImageManager.leftStack = photographyImageManager.leftStack.map(photographyImageManager.updateImage);
      return photographyImageManager.rightStack = photographyImageManager.rightStack.map(photographyImageManager.updateImage);
    }
  };

  simSetup = function() {
    return stylistImageManager.setup();
  };

  $(document).ready(simSetup);

  $(document).on('page:load', simSetup);

  stylistImageManager = {
    leftStack: [],
    visible: '',
    rightStack: [],
    currentMedia: 'm',
    setup: function() {
      var $mirror;
      stylistImageManager.setupMedia();
      stylistImageManager.setupImages(2, 2);
      stylistImageManager.setDOMPhoto();
      $mirror = $('#mirror');
      return $mirror.on('click', function(e) {
        return stylistImageManager.nextPhoto();
      });
    },
    setupMedia: function() {
      var lMediaEvent, mMediaEvent, sMediaEvent;
      lMediaEvent = matchMedia("screen and (min-width: 1024px), screen and (min-height: 755px)");
      mMediaEvent = matchMedia("screen and (min-width: 480px), screen and (min-height: 320px)");
      sMediaEvent = matchMedia("not (screen and (min-width: 1024px), screen and (min-height: 755px) and (screen and (min-width: 480px), screen and (min-height: 320px)))");
      lMediaEvent.addListener(stylistImageManager.refreshImages);
      mMediaEvent.addListener(stylistImageManager.refreshImages);
      sMediaEvent.addListener(stylistImageManager.refreshImages);
      return stylistImageManager.refreshMedia();
    },
    refreshMedia: function() {
      if (window.matchMedia("screen and (min-width: 64em), screen and (min-height: 40em)").matches) {
        return stylistImageManager.currentMedia = 'l';
      } else if (window.matchMedia("screen and (min-width: 30em), screen and (min-height: 20em)").matches) {
        return stylistImageManager.currentMedia = 'm';
      } else {
        return stylistImageManager.currentMedia = 's';
      }
    },
    setDOMPhoto: function() {
      return $('#photo-s').attr('src', stylistImageManager.visible);
    },
    imagePrefix: '/img/s/',
    imageExtension: '.jpg',
    swapStacks: function() {
      var ls;
      ls = stylistImageManager.leftStack.reverse();
      stylistImageManager.leftStack = stylistImageManager.rightStack.reverse();
      return stylistImageManager.rightStack = ls;
    },
    nextPhoto: function() {
      if (stylistImageManager.rightStack.length === 0) {
        stylistImageManager.swapStacks();
      }
      stylistImageManager.leftStack.push(stylistImageManager.visible);
      stylistImageManager.visible = stylistImageManager.rightStack.pop();
      return stylistImageManager.setDOMPhoto();
    },
    previousPhoto: function() {
      if (stylistImageManager.leftStack.length === 0) {
        stylistImageManager.swapStacks();
      }
      stylistImageManager.rightStack.push(stylistImageManager.visible);
      stylistImageManager.visible = stylistImageManager.leftStack.pop();
      return stylistImageManager.setDOMPhoto();
    },
    setupImages: function(first, end) {
      var ext, i, prefix, size, _i, _results;
      size = stylistImageManager.currentMedia;
      prefix = stylistImageManager.imagePrefix;
      ext = stylistImageManager.imageExtension;
      stylistImageManager.visible = prefix + size + ("/s_" + 1) + ext;
      _results = [];
      for (i = _i = first; _i <= end; i = _i += 1) {
        _results.push(stylistImageManager.rightStack.push(prefix + size + '/s_' + i + ext));
      }
      return _results;
    },
    updateImage: function(image) {
      return image.substr(0, 7) + stylistImageManager.currentMedia + image.substr(8);
    },
    refreshImages: function() {
      stylistImageManager.refreshMedia();
      stylistImageManager.visible = stylistImageManager.updateImage(stylistImageManager.visible);
      stylistImageManager.setDOMPhoto();
      stylistImageManager.leftStack = stylistImageManager.leftStack.map(stylistImageManager.updateImage);
      return stylistImageManager.rightStack = stylistImageManager.rightStack.map(stylistImageManager.updateImage);
    }
  };

  nmSetup = function() {
    return navManager.setup();
  };

  $(document).ready(nmSetup);

  $(document).on('page:load', nmSetup);

  navManager = {
    setup: function() {
      var $links;
      $links = $('.link');
      return $links.each(function() {
        var href;
        href = $(this).children('a').first().attr('href');
        return $(this).attr('onclick', "location.href='" + href + "';");
      });
    }
  };

}).call(this);
